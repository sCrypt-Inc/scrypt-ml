// NN architecture:
// 784 (input layer) * 64 (hidden layer) * 10 (output layer)
// Hidden layer activation func: ReLU
// Out func: argmax

// Important:
// Vlues of the NN should be formated as two's complement signed values within u64.

from "./model_params" import WEIGHTS_0, WEIGHTS_1, BIASES_0, BIASES_1;

const u32 N_NODES_IN = 784;
const u32 N_NODES_HL = 5;
const u32 N_NODES_OUT = 10;

const u64 TARGET_CLASS = 8;

const u64 MAX_POS_VAL = 9223372036854775807;

def gt(u64 a, u64 b) -> bool {
    return (b - a) > MAX_POS_VAL;
}

def apply_weights0(u64[N_NODES_IN] inputs, \
                   u64[N_NODES_HL][N_NODES_IN] weights) -> u64[N_NODES_HL] {
    u64[N_NODES_HL] mut res = [0; N_NODES_HL];

    for u32 i in 0..N_NODES_HL {
        u64 mut sum = 0;
        for u32 j in 0..N_NODES_IN {
            sum = sum + (weights[i][j] * inputs[j]); 
        }
        res[i] = sum;
    }

    return res;
}

def apply_weights1(u64[N_NODES_HL] inputs, \
                   u64[N_NODES_OUT][N_NODES_HL] weights) -> u64[N_NODES_OUT] {
    u64[N_NODES_OUT] mut res = [0; N_NODES_OUT];

    for u32 i in 0..N_NODES_OUT {
        u64 mut sum = 0;
        for u32 j in 0..N_NODES_HL {
            sum = sum + (weights[i][j] * inputs[j]); 
        }
        res[i] = sum;
    }

    return res;
}

def add_biases0(u64[N_NODES_HL] mut inputs, \
                u64[N_NODES_HL] biases) -> u64[N_NODES_HL] {
    for u32 i in 0..N_NODES_HL {
        inputs[i] = inputs[i] + biases[i];
    }
    return inputs;
}

def add_biases1(u64[N_NODES_OUT] mut inputs, \
                u64[N_NODES_OUT] biases) -> u64[N_NODES_OUT] {
    for u32 i in 0..N_NODES_OUT {
        inputs[i] = inputs[i] + biases[i];
    }
    return inputs;
}

def apply_relu(u64[N_NODES_HL] mut inputs) -> u64[N_NODES_HL] {
    for u32 i in 0..N_NODES_HL {
        inputs[i] = if gt(inputs[i], 0) { 
            inputs[i] 
        } else {
            0
        };
    }
    return inputs;
}

def argmax(u64[N_NODES_OUT] inputs) -> u64 {
    u64 mut max = inputs[0];
    u64 mut res = 0;
    u64 mut idx = 0;
    for u32 i in 1..N_NODES_OUT {
        u64 val = inputs[i];
        max = if gt(val, max) { val } else { max };
        res = if gt(val, max) { idx } else { res };
        idx = idx + 1;
    }
    return res;
}

def main(private u64[N_NODES_IN] model_inputs) {
    u64[N_NODES_HL] step0 = apply_weights0(model_inputs, WEIGHTS_0);
    u64[N_NODES_HL] step1 = add_biases0(step0, BIASES_0);
    u64[N_NODES_HL] step2 = apply_relu(step1);
    u64[N_NODES_OUT] step3 = apply_weights1(step2, WEIGHTS_1);
    u64[N_NODES_OUT] step4 = add_biases1(step3, BIASES_1);
    u64 res = argmax(step4);

    assert(res == TARGET_CLASS);
    return;
}
